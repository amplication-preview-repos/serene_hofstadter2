/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BusinessAccountService } from "../businessAccount.service";
import { BusinessAccountCreateInput } from "./BusinessAccountCreateInput";
import { BusinessAccount } from "./BusinessAccount";
import { BusinessAccountFindManyArgs } from "./BusinessAccountFindManyArgs";
import { BusinessAccountWhereUniqueInput } from "./BusinessAccountWhereUniqueInput";
import { BusinessAccountUpdateInput } from "./BusinessAccountUpdateInput";

export class BusinessAccountControllerBase {
  constructor(protected readonly service: BusinessAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BusinessAccount })
  async createBusinessAccount(
    @common.Body() data: BusinessAccountCreateInput
  ): Promise<BusinessAccount> {
    return await this.service.createBusinessAccount({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BusinessAccount] })
  @ApiNestedQuery(BusinessAccountFindManyArgs)
  async businessAccounts(
    @common.Req() request: Request
  ): Promise<BusinessAccount[]> {
    const args = plainToClass(BusinessAccountFindManyArgs, request.query);
    return this.service.businessAccounts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BusinessAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async businessAccount(
    @common.Param() params: BusinessAccountWhereUniqueInput
  ): Promise<BusinessAccount | null> {
    const result = await this.service.businessAccount({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BusinessAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBusinessAccount(
    @common.Param() params: BusinessAccountWhereUniqueInput,
    @common.Body() data: BusinessAccountUpdateInput
  ): Promise<BusinessAccount | null> {
    try {
      return await this.service.updateBusinessAccount({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BusinessAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBusinessAccount(
    @common.Param() params: BusinessAccountWhereUniqueInput
  ): Promise<BusinessAccount | null> {
    try {
      return await this.service.deleteBusinessAccount({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
