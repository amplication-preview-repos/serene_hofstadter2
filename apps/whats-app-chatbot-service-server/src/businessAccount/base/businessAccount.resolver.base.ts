/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BusinessAccount } from "./BusinessAccount";
import { BusinessAccountCountArgs } from "./BusinessAccountCountArgs";
import { BusinessAccountFindManyArgs } from "./BusinessAccountFindManyArgs";
import { BusinessAccountFindUniqueArgs } from "./BusinessAccountFindUniqueArgs";
import { DeleteBusinessAccountArgs } from "./DeleteBusinessAccountArgs";
import { BusinessAccountService } from "../businessAccount.service";
@graphql.Resolver(() => BusinessAccount)
export class BusinessAccountResolverBase {
  constructor(protected readonly service: BusinessAccountService) {}

  async _businessAccountsMeta(
    @graphql.Args() args: BusinessAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BusinessAccount])
  async businessAccounts(
    @graphql.Args() args: BusinessAccountFindManyArgs
  ): Promise<BusinessAccount[]> {
    return this.service.businessAccounts(args);
  }

  @graphql.Query(() => BusinessAccount, { nullable: true })
  async businessAccount(
    @graphql.Args() args: BusinessAccountFindUniqueArgs
  ): Promise<BusinessAccount | null> {
    const result = await this.service.businessAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BusinessAccount)
  async deleteBusinessAccount(
    @graphql.Args() args: DeleteBusinessAccountArgs
  ): Promise<BusinessAccount | null> {
    try {
      return await this.service.deleteBusinessAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
